

#include <iostream>
#include <string>

using namespace std;

class Entity {
//By using protected the member variables can be accessed and modified directly by the derived classes. 
//This allows the derived classes to inherit and utilize these variables without exposing them to the outside world. It provides a level of encapsulation and data hiding
//ensuring that the variables are only accessed and modified within the class hierarchy
protected:
    string name;
    int hp;
    int attack;
    int defense;

public:
    Entity(const string& name, int hp, int attack, int defense)
        : name(name), hp(hp), attack(attack), defense(defense) {}

    string getName() const { return name; }
    int getHP() const { return hp; }
    void setHP(int newHP) { hp = newHP; }
    int getAttack() const { return attack; }
    int getDefense() const { return defense; }

    void attackEntity(Entity& other, int damage) 
    {
        other.hp = max(0, other.hp - damage);
        cout << name << " attacked " << other.name << " for " << damage << " damage!" << endl;
    }

    bool isDefeated() const
    {
        return hp <= 0;
    }
};

class Player : public Entity {
public:
    Player(const string& name, int hp, int attack, int defense)
        : Entity(name, hp, attack, defense) {}

    int chooseDamage() {
        int damage;
        cout << name << " enter the amount of damage you want to do: ";
        cin >> damage;
        return damage;
    }
};

class Enemy : public Entity {
public:
    Enemy(const string& name, int hp, int attack, int defense)
        : Entity(name, hp, attack, defense) {}

    int chooseDamageEnemy() {
         // Prompt the enemy to enter the amount of damage it wants to inflict on the player
         int damage;
        cout << "Goblin King enter the amount of damage you want to do: ";
        cin >> damage;
        return damage;
       
    }
};

int main() {
    Player players[3] = {
        Player("Dragon Slayer", 100, 20, 10),
        Player("Warrior Fairy", 120, 18, 12),
        Player("shadow Assasin", 80, 25, 8)
    };

    cout << "Choose your player:" << endl;
    cout << "1. " << players[0].getName() << endl;
    cout << "2. " << players[1].getName() << endl;
    cout << "3. " << players[2].getName() << endl;
    int choice;
    cout << "Enter your choice (1-3): ";
    cin >> choice;

    if (choice < 1 || choice > 3) 
    {
      // Invalid choice, exit the game
        cout << "Invalid choice! Exiting the game." << endl;
        return 0;
    }

    Player& player = players[choice - 1];
    Enemy enemy("Goblin King", 150, 15, 5);

    cout << "----- Battle Start -----" << endl;

  

    while (true) {
        int playerDamage = player.chooseDamage();
        int enemyDamage = enemy.chooseDamageEnemy();
       
        // Player attacks the enemy
        player.attackEntity(enemy, enemyDamage);
        if (player.isDefeated()) 
        {
            // Player is defeated, enemy wins
            cout << "Enemy " << enemy.getName() << " wins!" << endl;
            break;
        }
        
        // Enemy attacks the player
        enemy.attackEntity(player, playerDamage);

        if (enemy.isDefeated()) {
        // Enemy is defeated, player wins
            cout << "Player " << player.getName() << " wins!" << endl;
            break;
        }

        cout << endl;
    }

    cout << "----- Battle End -----" << endl;

    return 0;
}

